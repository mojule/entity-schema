import { IOneOfSchema } from './oneof-schema';
import { IEntitySchema } from './entity-schema';
import { IAppSchema } from './app-schema';
import { IEnumSchema } from './enum-schema';
import { IRefSchema } from './ref-schema';
import { IChildEntitySchema } from './child-entity-schema';
import { IConstPropertySchema } from './const-property-schema';
import { IEntityReferenceSchema } from './entity-reference-schema';
import { TSubschema } from './subschema';
import { IWsSchema } from './ws-schema';
import { IObjectSchema } from './object-schema';
import { IStringSchema } from './string-schema';
import { INumberSchema } from './number-schema';
import { IBooleanSchema } from './boolean-schema';
import { IArraySchema } from './array-schema';
export declare const predicates: {
    oneOfSchema: (value: any) => value is IOneOfSchema;
    constPropertySchema: (value: any) => value is IConstPropertySchema;
    stringSchema: (value: any) => value is IStringSchema;
    numberSchema: (value: any) => value is INumberSchema;
    booleanSchema: (value: any) => value is IBooleanSchema;
    arraySchema: (value: any) => value is IArraySchema;
    childEntitySchema: (value: any) => value is IChildEntitySchema;
    entitySchema: (value: any) => value is IEntitySchema;
    entityReferenceSchema: (value: any) => value is IEntityReferenceSchema;
    objectSchema: (value: any) => value is IObjectSchema;
    appSchema: (value: any) => value is IAppSchema;
    refSchema: (value: any) => value is IRefSchema;
    enumSchema: (value: any) => value is IEnumSchema;
    wsSchema: (value: any) => value is IWsSchema;
    subSchema: (value: any) => value is TSubschema;
    anySchema: (value: any) => value is any;
};
