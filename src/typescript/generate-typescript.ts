import { compile } from 'json-schema-to-typescript'
import { JSONSchema4 } from 'json-schema'
import { kebabCase } from 'lodash'
import { IAppSchema } from '../predicates/app-schema'
import { SchemaCollection } from '../schema-collection'
import { pascalCase } from '../utils/pascal-case'

export interface GeneratedFile {
  filename: string
  contents: string
}

export interface TypescriptFiles {
  interfaces: GeneratedFile[]
  enums: GeneratedFile[]
}

export const generateTypescript = async ( schemaMap: IAppSchema[] ): Promise<TypescriptFiles> => {
  const schemaCollection = SchemaCollection( schemaMap )
  const { entityTitles, enumTitles } = schemaCollection

  const interfaces = await Promise.all( entityTitles.map( title =>
    generateSchemaInterface( title, schemaCollection )
  ))

  interfaces.push( generateEntityModelType( entityTitles, schemaCollection ) )
  interfaces.push( generateMongooseInterface( entityTitles ) )

  const enums = generateEnums( enumTitles, schemaCollection )

  const typescriptFiles: TypescriptFiles = {
    interfaces, enums
  }

  return typescriptFiles
}

const generateSchemaInterface = async ( title: string, schemaCollection ): Promise<GeneratedFile> => {
  const filename = kebabCase( title ) + '.ts'
  const interfaceSchema = schemaCollection.interfaceSchema( title )
  const interfaceName = interfaceSchema.title!
  const contents = await compile( interfaceSchema, interfaceName, {
    style: {
      semi: false
    }
  })

  return { filename, contents }
}

const generateEnum = ( name, map ) => `
/**
 * This file was automatically generated by generate-typescript
 * DO NOT MODIFY IT BY HAND
 */

export enum ${ name } {
${ Object.keys( map ).map( key => `  ${ key } = "${ map[ key ] }"` ).join( ',\n' ) }
}

export const ${ name }Map = {
${ Object.keys( map ).map( key => `  "${ key }": "${ map[ key ] }"` ).join( ',\n' ) },
${ Object.keys( map ).map( key => `  "${ map[ key ] }": "${ key }"` ).join( ',\n' ) }
}
`.trimLeft()

const generateEnums = ( enumTitles: string[], schemaCollection ) => {
  const enums: GeneratedFile[] = []

  enumTitles.forEach( title => {
    const enumSchema = schemaCollection.get( title )

    const keys = <string[]>enumSchema.enum
    const titles = <string[]>enumSchema.wsEnumTitles

    if ( keys.length !== titles.length ) {
      throw Error( 'Enum - enum.length must be the same as wsEnumTitles.length' )
    }

    const keyToTitleMap = keys.reduce( ( map, key, i ) => {
      map[ key ] = titles[ i ]

      return map
    }, {} )

    const filename = kebabCase( title ) + '.ts'
    const contents = generateEnum( pascalCase( title ), keyToTitleMap )

    enums.push({ filename, contents })
  })

  return enums
}

const generateEntityModelType = ( titles: string[], schemaCollection ): GeneratedFile => {
  const filename = 'entity-model.ts'
  const contents = entityTitlesToModelType( titles, schemaCollection )

  return { filename, contents }
}

const generateMongooseInterface = ( titles: string[] ): GeneratedFile => {
  const filename = 'mongoose-models.ts'
  const contents = entityTitlesToInterface( titles )

  return { filename, contents }
}

const entityTitleToInterfaceDefinition = title => {
  const ctorName = pascalCase( title )

  return `  ${ ctorName }: IMongooseEntityModel`
}

const entityTitlesToInterface = titles => {
  return `
/**
 * This file was automatically generated by generate-typescript
 * DO NOT MODIFY IT BY HAND
 */
import * as mongoose from 'mongoose'

export interface IMongooseEntityModel extends mongoose.Model<mongoose.Document> {
  uniquePropertyNames: () => string[],
  valuesForUniqueProperty: ( propertyName: string, parentId?: string ) => Promise<string[]>
  uniqueValuesMap: ( parentId?: string ) => Promise<{ [ propertyName: string ]: string[] }>
}

export interface IMongooseModels {
${ titles.map( entityTitleToInterfaceDefinition ).join( '\n' ) }
}
`.trimLeft()
}

const entityTitleToImport = ( title: string, schemaCollection ) => {
  const filename = kebabCase( title )
  const interfaceSchema = schemaCollection.interfaceSchema( title )
  const interfaceName = interfaceSchema.title!

  return `import { ${ interfaceName } } from './${ filename }'`
}

const entityTitlesToUnionType = ( titles: string[], schemaCollection ) => {
  return titles.map( title => {
    const interfaceSchema = schemaCollection.interfaceSchema( title )
    const interfaceName = interfaceSchema.title!

    return interfaceName
  } ).join( ' | ' )
}

const entityTitlesToModelType = ( titles: string[], schemaCollection ) => {
  return `
/**
 * This file was automatically generated by generate-typescript
 * DO NOT MODIFY IT BY HAND
 */
${ titles.map( entityTitleToImport ).join( '\n' ) }

export type EntityModel = ${ entityTitlesToUnionType( titles, schemaCollection ) }
`.trimLeft()
}
